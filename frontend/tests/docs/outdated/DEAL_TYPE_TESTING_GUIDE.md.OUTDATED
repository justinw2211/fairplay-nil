# Deal Type Testing Guide

## �� **CURRENT STATUS: 8/8 STEPS WORKING FOR SIMPLE DEAL TYPE**

### ✅ **WORKING INFRASTRUCTURE**

#### **Authentication Requirements**
- **Production URL**: `https://fairplay-nil.vercel.app`
- **Test Credentials**: `test1@test.edu` / `testuser`
- **Authentication State**: Saved in `playwright/.auth/user.json`
- **Project**: Use `chromium-auth` for protected routes

#### **Test Framework**
- **Main File**: `frontend/tests/step-by-step-deal-wizard.spec.js` (clean version)
- **Complete End-to-End Flow**: All 8 steps working consistently
- **Comprehensive Logging**: Emoji indicators for easy debugging
- **Screenshot Capture**: On failures for visual debugging
- **Robust Error Handling**: Fallback mechanisms and validation

## 📁 **CURRENT ARCHITECTURE & FILES TO USE**

### **🎯 PRIMARY TEST FILE (USE THIS)**
```
frontend/tests/step-by-step-deal-wizard.spec.js
```
- **Status**: Active development (clean version)
- **Purpose**: Complete end-to-end testing of Simple deal type
- **Progress**: 8/8 steps working (100% completion)
- **Contains**: All working patterns and complete flow
- **Command**: `npx playwright test step-by-step-deal-wizard.spec.js --project=chromium-auth`

### **📚 DOCUMENTATION FILES (REFERENCE THESE)**
```
frontend/tests/PLAYWRIGHT_SUMMARY.md          # Current status overview
frontend/tests/PLAYWRIGHT_PROGRESS_NOTES.md   # Detailed progress and patterns
frontend/tests/DEAL_TYPE_TESTING_GUIDE.md     # This file - Testing guide
frontend/tests/PLAYWRIGHT_FINDINGS.md         # Technical discoveries
frontend/tests/PLAYWRIGHT_CONTEXT.md          # Context and next steps
```

### **🔧 CONFIGURATION FILES (DON'T MODIFY)**
```
frontend/playwright.config.js                 # Playwright configuration
frontend/global-setup.js                      # Authentication setup
frontend/package.json                         # Test scripts
```

### **📊 TEST RESULTS (GENERATED)**
```
frontend/test-results/                        # Screenshots and error logs
frontend/playwright-report/                   # HTML test reports
```

### **🚫 ARCHIVED FILES (DON'T USE)**
```
frontend/tests/archive/step-by-step-deal-wizard.spec.js.old  # Old version with syntax errors
frontend/tests/deal-type-diagnostic.spec.js   # Old diagnostic tests
frontend/tests/deal-type-comparison.spec.js   # Old comparison tests
```

## 🚀 **WORKING STEP-BY-STEP PATTERNS**

### **✅ Step 0: Social Media**
```javascript
// ✅ Working implementation:
await page.goto('https://fairplay-nil.vercel.app/dashboard');
// Handle login if needed
await page.locator('input[placeholder*="Instagram"]').fill('@testuser');
await page.locator('input[placeholder*="followers"]').fill('1000');
await page.locator('button:has-text("Continue")').click();
```

### **✅ Step 1: Deal Terms**
```javascript
// ✅ Working implementation:
await page.locator('input[placeholder*="Nike"], input[placeholder*="John"]').fill('Test Deal');
// Handle green popup if present
const greenPopup = page.locator('text="Social media confirmed"');
if (await greenPopup.count() > 0) {
  await page.locator('button[aria-label="Close"]').click();
}
await page.locator('button:has-text("Next")').click();
```

### **✅ Step 2: Payor Info**
```javascript
// ✅ Working implementation:
await page.locator('text="Business"').first().click();
await page.locator('input[placeholder*="Nike"], input[placeholder*="John"]').fill('Test Company Inc.');
await page.locator('button:has-text("Next")').click();
```

### **✅ Step 3: Activities**
```javascript
// ✅ Working implementation:
await page.locator('text="Social Media"').first().click();
await page.locator('button:has-text("Next")').click();
```

### **✅ Step 4: Social Media Activity Form**
```javascript
// ✅ Working implementation:
await page.locator('text="Instagram"').first().click();
// Click plus buttons to enable form
const allButtons = page.locator('button');
if (await allButtons.count() >= 3) {
  await allButtons.nth(2).click();
}
await page.locator('button:has-text("Continue")').click();
```

### **✅ Step 5: Compliance**
```javascript
// ✅ Working implementation:
const noOptions = page.locator('text="No"');
for (let i = 0; i < await noOptions.count(); i++) {
  await noOptions.nth(i).click();
}
await page.locator('button:has-text("Continue")').click();
```

### **✅ Step 6: Compensation**
```javascript
// ✅ Working implementation:
await page.locator('input[type="number"]').first().fill('1000');
await page.locator('select').first().selectOption({ index: 1 });
// Fill additional fields if needed
const additionalInputs = page.locator('input');
for (let i = 0; i < await additionalInputs.count(); i++) {
  const input = additionalInputs.nth(i);
  const value = await input.inputValue();
  if (!value && await input.isVisible()) {
    await input.fill('100');
  }
}
await page.locator('button:has-text("Next")').click();
```

### **✅ Step 7: Review & Submit**
```javascript
// ✅ Working implementation:
const submitButton = page.locator('button:has-text("Submit Deal"), button:has-text("Submit")');
await submitButton.waitFor({ state: 'visible', timeout: 10000 });
await submitButton.click();
// Verify submission success
expect(page.url()).toMatch(/\/add\/deal\/submission-success\/\d+/);
```

## 🔧 **WORKING ELEMENT SELECTION STRATEGIES**

### **Chakra UI Compatible Selectors**
```javascript
// ✅ Radio buttons
page.locator('text="Business"').first()

// ✅ Dynamic placeholders
page.locator('input[placeholder*="Nike"], input[placeholder*="John"]')

// ✅ Button selection
page.locator('button:has-text("Next")').last()

// ✅ Multiple option selection
page.locator('text="No"')

// ✅ Icon-based selection
page.locator('button').filter({ has: page.locator('svg[data-lucide="plus"]') })
```

### **Form Validation Patterns**
```javascript
// ✅ Check button enabled state
const isNextButtonEnabled = await nextButton.isEnabled();
if (hasNextButton && isNextButtonEnabled) {
  await nextButton.click();
}
```

### **Error Handling Patterns**
```javascript
// ✅ Comprehensive logging
console.log('🎯 STEP X: Testing...');
console.log('✅ Successfully completed...');
console.log('❌ Error occurred...');
console.log('📸 Screenshot saved...');

// ✅ Screenshot capture on failure
await page.screenshot({ path: 'test-results/step-x-failure.png' });
```

## 📋 **TEST DATA REQUIREMENTS**

### **Authentication**
- **Email**: `test1@test.edu`
- **Password**: `testuser`
- **Account**: Must exist in production database

### **Form Data**
- **Social Media**: `@testuser` / `1000` followers
- **Deal Nickname**: `Test Simple Deal`
- **Payor Info**: `Test Company Inc.` (Business)
- **Activities**: Social Media selected
- **Compensation**: $1000 (amount + schedule + description)

## 🎯 **DEAL TYPE DIFFERENCES**

### **Simple Deal**
- **Steps**: 0-7 (Social Media → Review & Submit)
- **Ending**: Submission success page
- **Features**: Basic deal tracking with complete flow

### **Clearinghouse Deal**
- **Steps**: 0-7 + NIL Go prediction
- **Ending**: Clearinghouse result page
- **Features**: Includes NIL Go clearinghouse prediction

### **Valuation Deal**
- **Steps**: 0-7 + valuation analysis
- **Ending**: Valuation result page
- **Features**: Includes fair market value analysis

## 🚀 **QUICK START COMMANDS**

```bash
# Run complete flow test
npx playwright test step-by-step-deal-wizard.spec.js --project=chromium-auth

# Run with detailed output
npx playwright test step-by-step-deal-wizard.spec.js --project=chromium-auth --reporter=line

# Run with timeout
npx playwright test step-by-step-deal-wizard.spec.js --project=chromium-auth --timeout=120000

# View test reports
npx playwright show-report
```

## 📊 **SUCCESS METRICS**

- **8/8 steps working** for Simple deal type (100% completion)
- **Robust test infrastructure** established
- **Production environment** successfully tested
- **Authentication system** working reliably
- **Element selection strategies** proven effective
- **Error handling and debugging** comprehensive
- **Complete end-to-end flow** working consistently

## 🎯 **NEXT STEPS**

### **Option 1: Complete Other Deal Types**
- Apply working patterns to Clearinghouse deal type
- Apply working patterns to Valuation deal type
- Create comprehensive test suite for all deal types

### **Option 2: Enhance Test Coverage**
- Add more edge cases and error scenarios
- Improve test reliability and performance
- Add visual regression testing

### **Option 3: Create Comprehensive Test Suite**
- Document all working patterns for future reference
- Create a robust test suite covering all working functionality
- Add performance benchmarks

## 📁 **KEY FILES**

- `frontend/tests/step-by-step-deal-wizard.spec.js` - Main test file (clean version)
- `frontend/tests/PLAYWRIGHT_SUMMARY.md` - Updated summary
- `frontend/tests/PLAYWRIGHT_PROGRESS_NOTES.md` - Progress notes
- `frontend/tests/PLAYWRIGHT_FINDINGS.md` - Technical findings

**Last Updated**: January 2025  
**Status**: 100% Complete (8/8 steps working)  
**Next Focus**: Complete other deal types or comprehensive testing 