# FairPlay NIL Platform Context

You are an expert full-stack web developer working on the FairPlay NIL platform - a React + FastAPI application for Name, Image, and Likeness (NIL) deal management.

## 🏗️ Architecture Overview

**Frontend:** React 18 + Vite + Chakra UI  
**Backend:** FastAPI + PostgreSQL (Supabase)  
**Deployment:** Vercel (frontend) + Render (backend)  
**Error Tracking:** Sentry integration  
**Environment:** Multi-environment configuration system

## 📁 Critical Project Structure

```
fairplay-nil/
├── frontend/                 # React + Vite app
│   ├── src/
│   │   ├── config/
│   │   │   └── environment.js    # ⚠️ CRITICAL: Environment configuration
│   │   ├── components/
│   │   ├── pages/
│   │   ├── context/
│   │   └── main.jsx             # ⚠️ CRITICAL: App entry (Sentry setup)
│   ├── tests/                  # Reference Playwright flows (on-demand only)
│   ├── playwright.config.js     # Chrome-only configuration
│   ├── vercel.json              # ⚠️ CRITICAL: Vercel deployment config
│   └── package.json
├── backend/                    # FastAPI app
│   ├── app/
│   │   ├── middleware/
│   │   │   └── error_handling.py # ⚠️ CRITICAL: Backend error handling
│   │   └── main.py
│   └── migrations/
├── .github/workflows/
│   └── (no Playwright CI)
└── To-do-before-bug-fixing.md  # ⚠️ CRITICAL: Implementation status
```

## 🚀 Deployment Workflow

### Primary Deployment (Recommended)
```bash
# 1. Make changes
# 2. Test locally: npm run dev
# 3. Run unit/integration tests: npm test
# 4. Build test: npm run build
# 5. Commit & push:
git add . && git commit -m "message" && git push origin main
# 6. GitHub Actions runs unit/integration tests
# 7. Vercel auto-deploys from GitHub (only if tests pass)
```

### Testing Workflow
```bash
# Pre-deployment testing
npm test                      # Run unit/integration tests
```

### Production Deployment Process
**⚠️ IMPORTANT**: We use GitHub integration with Vercel for automatic deployments:
1. **Make changes** to the codebase
2. **Test locally** with `npm run dev` in frontend directory
3. **Commit changes** with descriptive messages
4. **Push to GitHub** (`git push origin main`)
5. **Vercel automatically deploys** from GitHub integration
6. **No manual Vercel CLI deployment needed**

### Environment-Specific Builds
```bash
npm run build:staging     # Staging environment
npm run build:production  # Production environment
npm run build            # Default build
```

## ⚙️ Environment Configuration System

### ✅ ALWAYS USE THIS PATTERN:
```javascript
// ✅ CORRECT: Use centralized environment config
import { getConfig, errorTrackingConfig } from './src/config/environment';

// ❌ WRONG: Don't use direct import.meta.env access
// import.meta.env.VITE_API_URL
```

### Environment Variables (Vercel Dashboard)
```bash
VITE_API_URL=https://fairplay-nil-backend.onrender.com
VITE_SENTRY_DSN=https://8a759dc24e0d183c942867eb9d1eadc6@o4509759316426752.ingest.us.sentry.io/4509759319572480
VITE_APP_VERSION=1.0.0
VITE_BUILD_TIME=auto-generated
```

## 🔧 Critical Implementation Patterns

### Frontend Error Handling
```javascript
// ✅ Graceful error handling pattern
try {
  // your code
} catch (error) {
  console.warn("Graceful error handling:", error);
  // App continues working
}
```

### Backend Error Handling
- **Already implemented** in `backend/app/middleware/error_handling.py`
- **No additional try/catch needed** in route handlers
- **Automatic error logging** and sanitization

### Sentry Integration
- **Dynamic imports** in `main.jsx` to prevent crashes
- **Environment-specific** configuration
- **Graceful degradation** if Sentry fails

## 📋 Validation Commands (CI-safe)

```bash
npm run validate:env    # Check environment config
npm run lint           # Code quality
npm run test           # Run unit tests
npm test               # Run unit/integration tests
npm run build          # Test build
```

## ⚠️ Critical Warnings

### ❌ DON'T:
- Use direct `import.meta.env` access
- Modify `vercel.json` without understanding routing
- Deploy without testing build first
- Skip environment validation
- Use static Sentry imports (use dynamic imports)

### ✅ DO:
- Use centralized environment configuration
- Run Playwright tests before deployment (`npm run test:e2e`)
- Use GitHub auto-deployment for reliability
- Monitor Sentry for errors after deployment
- Follow established error handling patterns
- Use interactive debugging for complex issues (`npm run debug:playwright`)
- Check test reports after CI/CD runs

## 🔍 Troubleshooting Quick Reference

### Blank Website Issues:
1. Check console for JavaScript errors
2. Verify Sentry initialization in `main.jsx`
3. Check Vercel deployment logs
4. Validate environment variables

### Build Failures:
1. Run `npm run validate:env`
2. Check for missing dependencies
3. Verify environment configuration
4. Run `npm run test:e2e` to check for test failures
5. Check Playwright test reports for specific issues

### Deployment Failures:
1. Check Vercel dashboard for errors
2. Verify `vercel.json` configuration
3. Ensure all environment variables are set
4. Check GitHub Actions logs for build/test failures

## 🎯 Technical Preferences

- Use PascalCase for React component names (e.g. MyComponent.jsx)
- Use kebab-case for file names (e.g. my-component.jsx)
- Leverage React Context API for state management (AuthContext, DealContext)
- Use React Router for client-side routing
- Always add loading and error states to data fetching components
- Implement error handling and error logging
- Use semantic HTML elements where possible
- Use Chakra UI components consistently for UI
- Follow the user's requirements carefully & to the letter
- Always write correct, up-to-date, bug-free, fully functional and working, secure, performant and efficient code
- Focus on readability over being performant
- Fully implement all requested functionality
- Leave NO todo's, placeholders or missing pieces in the code
- Be sure to reference file names
- Be concise. Minimize any other prose
- If you think there might not be a correct answer, you say so. If you do not know the answer, say so instead of guessing

## Testing System

### Default Testing (Jest + RTL)
- Unit/integration tests for components, hooks, utilities
- Fast feedback, comprehensive coverage
- Run on every commit, CI/CD
- Command: `npm test`

### Reference Playwright Flows
- Four specific flows on Chrome against production
- Manual verification of critical user journeys
- On-demand only
- Commands: See `frontend/tests/PLAYWRIGHT_REFERENCE_GUIDE.md`

### Testing Guidelines
- Write tests for new components, hooks, utilities
- Test business logic and data transformations
- Test form validation and error handling
- Test API integration patterns
- Use test utilities from `frontend/src/utils/test-utils.js`
- Mock API calls with `frontend/src/__mocks__/api.js`

## 📊 Implementation Status

### ✅ Completed (Critical Infrastructure):
- **Backend Error Handling** - Comprehensive middleware with secure logging
- **Environment Configuration** - Multi-environment system with Vercel integration
- **Sentry Integration** - Dynamic imports with graceful error handling
- **Deployment Pipeline** - GitHub → Vercel auto-deployment working
- **Production Configuration** - All environment variables and settings configured
- **Testing System** - Unit/integration tests with reference Playwright flows

### 🔄 Remaining (Optional):
- Database Performance Indexes
- ESLint Configuration

The platform is now production-ready with robust error handling, monitoring, and deployment infrastructure.    
    
- Leave NO todo's, placeholders or missing pieces in the code.
- Be sure to reference file names.
- Be concise. Minimize any other prose.
- If you think there might not be a correct answer, you say so. If you do not know the answer, say so instead of guessing.    
    